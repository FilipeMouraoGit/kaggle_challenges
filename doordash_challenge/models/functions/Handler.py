import logging
import pandas as pd


class DataHandler:
    def __init__(self, data: pd.DataFrame, column_methods: dict):
        self.raw_data = data
        self.handler_data = data
        self.column_methods = column_methods
        self.fill_with_value = {}
        self.fill_with_cluster_value = {}

    def fill_na_with_new_category(self, extra_category_name='not informed', specific_column=None):
        """
        From a date column, extract the weekday, hour, time_of_day and weekend
        """
        if specific_column is not None and self.column_methods[specific_column] == 'fill with new category':
            self.fill_with_value[specific_column] = extra_category_name
            self.handler_data[specific_column] = self.handler_data[specific_column].fillna(extra_category_name)
        else:
            for column, method in self.column_methods.items():
                if method == 'fill with new category':
                    self.fill_with_value[column] = extra_category_name
                    self.handler_data[column] = self.handler_data[column].fillna(extra_category_name)
                    self.handler_data[column] = self.handler_data[column].astype(str)

        return self.handler_data

    def fill_na_with_median(self, specific_column=None):
        """
        From a date column, extract the weekday, hour, time_of_day and weekend
        """
        if specific_column is not None and self.column_methods[specific_column] == 'fill with median':
            median = self.raw_data[specific_column].median()
            self.fill_with_value[specific_column] = median
            self.handler_data[specific_column] = self.raw_data[specific_column].fillna(median)
        else:
            for column, method in self.column_methods.items():
                if method == 'fill with median':
                    median = self.raw_data[column].median()
                    self.fill_with_value[column] = median
                    self.handler_data[column] = self.raw_data[column].fillna(median)
        return self.handler_data

    def fill_na_with_cluster_median(self, cluster_columns=['market_id', 'time_of_day']):
        """
        From a date column, extract the weekday, hour, time_of_day and weekend
        """
        for column, method in self.column_methods.items():
            if method == 'fill with cluster median':
                cluster_data = self.raw_data\
                    .groupby(cluster_columns, as_index=False)\
                    .agg(median_value=(column, 'median'))

                self.fill_with_cluster_value[column] = cluster_data
                data = self.raw_data.merge(cluster_data, on=cluster_columns, how='left')
                self.handler_data[column] = data[column].fillna(data['median'])

        return self.handler_data

    def fill_missing_values_training_data(self):
        """
        Given a string of data points separated by `;` and a `fit_degree` polynomial degree:
        - Convert the data into 2 lists of points, with the  x and y coordinates;
        - Fit a curve the input data and requested degree;
        - Return a list of points generated by the fit;
        """
        _ = self.fill_na_with_new_category()
        _ = self.fill_na_with_median()
        _ = self.fill_na_with_cluster_median()
        return self.handler_data

    def fill_missing_values_testing_data(self, predicted_data):
        """
            Fill missing values with the values learnt from the training
        """
        for column, method in self.column_methods.items():
            if method in ['fill with new category', 'fill with median']:
                predicted_data[column] = predicted_data[column].fillna(self.fill_with_value[column])
            elif method == 'fill with cluster median':
                cluster_data = self.fill_with_cluster_value[column]
                cluster_columns = cluster_data.columns[:-1]
                if cluster_columns not in predicted_data.columns:
                    raise ValueError(f'One of the cluster columns is missing in the test data: {cluster_columns}')
                data = predicted_data.merge(cluster_data, on=cluster_columns, how='left')
                predicted_data[column] = data[column].fillna(data['median'])
            else:
                raise ValueError('Method not supported by the Handler')
        return predicted_data

